<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN" "http://java.sun.com/dtd/web-jsptaglibrary_1_2.dtd">
<taglib>
<tlib-version>1.0</tlib-version>
<jsp-version>1.2</jsp-version>
<short-name>favorite</short-name>
<uri>http://www.uengine.org/favorite</uri>
<display-name>favorite</display-name>
<description>
    favorite Tag Library.
  </description>
  
<tag>
<name>favorite</name>
<tag-class>org.uengine.analysis.jpivot.FavoriteComponentTag</tag-class>
<body-content>JSP</body-content>
<description>
      Test Favorite!!!
    </description>
<attribute>
<name>id</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>
<description>Name of the Session Attribute that is created by this tag</description>
</attribute>
<attribute>
<name>chartmodel</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>
<description>Name of the Session Attribute that is created by this tag</description>
</attribute>
<attribute>
<name>model</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>
<description>Name of the Session Attribute that is created by this tag</description>
</attribute>
<attribute>
<name>favoriteHttpParam</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
<description>Name of the Session Attribute that is created by this tag</description>
</attribute>
</tag>
<tag>
<name>dynamicform</name>
<tag-class>org.uengine.analysis.jpivot.DynamicFormComponentTag</tag-class>
<body-content>tagdependent</body-content>
<description>
      Creates an HTML form that is defined by an XML file.
      This component does not produce visible output directly, it must be rendered via the WCF render tag.
      Structure of the XML File
&lt;xform style="twocolumn"&gt;
  &lt;title value="Form Demo"&gt;
    &lt;imgButton label="Cancel" .../&gt;
  &lt;/title&gt;
  &lt;textField type="int" modelReference="intValue" label="Count" .../&gt;
  &lt;checkBox modelReference="nestedBean.boolValue" label="Check Me" .../&gt;
&lt;/xform&gt;

      creates a Form with a title, a close button in the upper right corner, a text input field
      and a check box.
      Data binding
      The form component is associated with a JavaBean. The input elements of the HTML
      form are bound to the bean properties via the modelReference attribute.
      The bean in the above example has an int property with the name intValue
      that can be modified by the &lt;textField ...&gt;.
      As shown in the check box example, the modelReference may contain
      an EL (JSTL Expression Language) expression.
      
      Valid type attribute values:
      booleanstringdateintposint - integer &gt;= 0doubleemailElement IDs
      The names of the HTTP parameters are generated by random. If this is not desired,
      you can use the id attribute.


&lt;xform style="twocolumn"&gt;
  &lt;textField id="field1" .../&gt;
  &lt;checkBox id="$id.field2" .../&gt;
&lt;/xform&gt;


      creates two HTML input fields, the first with
      name="field1", the second with name="myform.field2", where myform
      is the id attribute of this form tag.

      Form Elements
      The elements are rendered via /WEB-INF/wcf/controls.xsl. Please
      look there for details.
      labeltextFieldtextAreapasswordcheckBoxradioButtonlistBox1listBoxNimgButtonbutton
      Use disabled="true" to make elements read-only.
      
      Use required="true" if user input is required.

      Form Buttons
       Buttons must have either a "handler" or an "actionReference"
       attribute. "handler" specifies a class that implements the
       NodeHandler interface which may handle requests, change button
       label etc. Use of "actionReference" is much easier and recommended,
       "actionReference" is the name of a method in the bean, that
       takes a single argument of type RequestContext. This method
       is invoked when the user presses the button.
       action="revert" -
            calls revert() on the Form, i.e. reads
            the bean properties and formats
            the data for presentation.
         action="validate" -
             calls validate() on the Form, i.e. parses
             user input and writes the values to the bean properties
         forward="/some/page.jsp" -
             if validation succeeds forwards to another page. Paramers make sense here.
         hide="true" -
             if validation succeeds hides the component
         successAttr="name-of-request-attribute" -
             if validation succeeds a request attribute with value true
             is created.
         handler="fully.qualified.ClassName" -
             name of a class that implements NodeHandler and is
             responsible for this nodeactionReference="methodName" the name of a method
             that takes an RequestContext as its argument.
         Bookmark support
      see com.tonbeller.wcf.bookmark. The content of the editable bean properties can be
      collected and restored via the Bookmarkable interface. To enable this, the tag
      attribute "bookmarkable" must be set to true.

      Examples
      See working examples in /WEB-INF

    </description>
<attribute>
<name>id</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>
<description>Name of the Session Attribute that is created by this tag</description>
</attribute>
<attribute>
<name>xmlURL</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>
<description>
    Path of an XML config file that describes the HTML form, relative to the application context.
    There may be different form descriptions for different Locales, the
    stylesheet will be choosen upon similar rules to ResourceBundle.
    
    Example: xmlUri='/WEB-INF/myform.xml'. For a german
    Browser WCF will try to load /WEB-INF/myform_de.xml.
    If this fails, it will load /WEB-INF/myform.xml.
  </description>
</attribute>
<attribute>
<name>visible</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
<description>Sets the visible property of the component. The WCF Render tag will not show a component whose visible flag is false</description>
</attribute>
<attribute>
<name>validate</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
<description>if set to true, then user input will be automatically
  verified, even if the button of another component was pressed.
  Both components must be part of the same HTML form element to make this work.</description>
</attribute>
<attribute>
<name>role</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
<description>
    Name of a role, optionally prefixed by '!'.
    Example: role='tomcat' allows members of the role tomcat to access
    this component, role='!tomcat' grants access to everybody except tomcat members.
  </description>
</attribute>
<attribute>
<name>bundle</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
<description>ResourceBundle for i18n replacements. If a text- or attributenode in xml starts with 'fmt:' the remaining text will be interpreted as key into the resource bundle.</description>
</attribute>
<attribute>
<name>model</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>
<description>EL expression that resolves to the bean that shall be edited</description>
</attribute>
<attribute>
<name>bookmarkable</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
<description>true|false indicating whether this form shall save its beans state. Default is false</description>
</attribute>
<attribute>
<name>finishButton</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
<description>true|false indicating whether this form supports finish if it is not the last page of a wizard. Default is true</description>
</attribute>
</tag>
<tag>
<name>include</name>
<tag-class>com.tonbeller.wcf.utils.IncludeTag</tag-class>
<body-content>EMPTY</body-content>
<description>
      Includes a JSP page if a certain HTTP parameter is present.
      The name of the file is prefix + paremeter + suffix. 
      For example,
      if prefix="/WEB-INF/mypages/", httpParam="page" and
      suffix=".jsp", then the URL ?page=page20 will include
      the file /WEB-INF/mypages/page20.jsp. If the parameter page
      is not present in the HTTP request, no page will be included.
    </description>
<attribute>
<name>id</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>
<description>Name of the Session Attribute that is created by this tag</description>
</attribute>
<attribute>
<name>favoriteHttpParam</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>
<description>name of the HTTP parameter</description>
</attribute>
<attribute>
<name>prefix</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
<description>Prefix</description>
</attribute>
<attribute>
<name>suffix</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
<description>Suffix</description>
</attribute>
</tag>

<!-- add for render fusionChart -->
<tag>
<name>render</name>
<tag-class>org.uengine.analysis.jpivot.FusionChartRendererTag</tag-class>
<body-content>JSP</body-content>
<description>
      WCF components produce XML Documents (DOM) internally which is transformed via XSLT into the
      outputformat by this tag. The output format will be HTML most of the time,
      but may be any other text format like CSV for example.
      
      The render tag will not produce any output for components that
      are not visible.

      

      The body may contain renderParam tags that supply
      parameters for rendering. The following
      stylesheet parameters are provided automatically (w/o nested parameter tag):
      renderId - contains the id of this tag. If not set the modelReference is takencontext - the context path of the application for building URLs
      Parameters may occur in xsl (via standard &lt;xsl:param .. &gt;) and in the DOM.
      The render tag searches for &lt;param name=".."/&gt; elements in the
      DOM and creates a corresponding attribute in its parent.
      For example, the following DOM
      &lt;myelem&gt;
        &lt;param name="abc" attr="bcd"/&gt;
      &lt;/myelem&gt;
      
      it will become
      
      &lt;myelem bcd="efg"&gt;
        &lt;param name="abc" attr="bcd"/&gt;
      &lt;/myelem&gt;
      
      where efg is the value of the abc parameter that was
      supplied by the JSP author. If the parameter named abc does not exsist,
      the attribute bcd is removed.
      
      This may be used to configure the page flow from a jsp, e.g.
      
        &lt;button label="OK" action="validate" handler="..."&gt;
          &lt;param name="successPage" attr="forward"/&gt;
        &lt;/button&gt;
      
      will create a forward attribute to the button element whose value is supplied by the jsp author
      via the renderParam tag, e.g.
      
        &lt;wcf:renderParam name="successPage" value="/somepage.jsp"/&gt;
      </description>
<attribute>
<name>id</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
<description>der renderId Stylesheet Parameter</description>
</attribute>
<attribute>
<name>ref</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>
<description>
        Name of the Session Attribute that contains the Component to be rendered.
      </description>
</attribute>
<attribute>
<name>xslUri</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>
<description>
        Path of the XSLT stylesheet to use, relative to the application context.
        There may be different stylesheets for different Locales, the
        stylesheet will be choosen upon similar rules to ResourceBundle.
        
        Example: xslUri="/WEB-INF/mystyle.xsl". For a german
        Browser WCF will try to load /WEB-INF/mystyle_de.xsl.
        If this fails, it will load /WEB-INF/mystyle.xsl.
      </description>
</attribute>
<attribute>
<name>xslCache</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
<description>true, if the stylesheet shall be compiled once and then reused. This gives better
       performance but makes it difficult to develop the stylesheets. Use true for production
       and false for development</description>
</attribute>
</tag>

<!-- add for FusionchartComponent -->

<tag>
<name>chart</name>
<tag-class>org.uengine.analysis.jpivot.FusionChartComponentTag</tag-class>
<body-content>JSP</body-content>
<description>
      Creates a Chart component. This component does not produce visible output directly, it must be rendered via the WCF render tag.
    </description>
<attribute>
<name>id</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>
<description>Name of the Session Attribute that is created by this tag</description>
</attribute>
<attribute>
<name>visible</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
<description>Sets the visible property of the component. The WCF Render tag will not show a component whose visible flag is false</description>
</attribute>
<attribute>
<name>role</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
<description>
    Name of a role, optionally prefixed by '!'.
    Example: role='tomcat' allows members of the role tomcat to access
    this component, role='!tomcat' grants access to everybody except tomcat members.
  </description>
</attribute>
<attribute>
<name>query</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>
<description>
    Name of the Session Attribute that contains the OLAP Data (query and result) for this tag.
  </description>
</attribute>
<attribute>
<name>baseDisplayURL</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
<description>Base link to chart display servlet. Will be parameterized with '?filename=&lt;temp chart image file name&gt;'</description>
</attribute>
<attribute>
<name>controllerURL</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
<description>Base link to web application controller for JPivot.
      Useful for complicated environments like a portal, where you would use
      a portlet:renderURL</description>
</attribute>
</tag>

<!-- add for chart form -->

<tag>
<name>form</name>
<tag-class>com.tonbeller.wcf.form.FormComponentTag</tag-class>
<body-content>tagdependent</body-content>
<description>
      Creates an HTML form that is defined by an XML file.
      This component does not produce visible output directly, it must be rendered via the WCF render tag.
      Structure of the XML File
&lt;xform style="twocolumn"&gt;
  &lt;title value="Form Demo"&gt;
    &lt;imgButton label="Cancel" .../&gt;
  &lt;/title&gt;
  &lt;textField type="int" modelReference="intValue" label="Count" .../&gt;
  &lt;checkBox modelReference="nestedBean.boolValue" label="Check Me" .../&gt;
&lt;/xform&gt;

      creates a Form with a title, a close button in the upper right corner, a text input field
      and a check box.
      Data binding
      The form component is associated with a JavaBean. The input elements of the HTML
      form are bound to the bean properties via the modelReference attribute.
      The bean in the above example has an int property with the name intValue
      that can be modified by the &lt;textField ...&gt;.
      As shown in the check box example, the modelReference may contain
      an EL (JSTL Expression Language) expression.
      
      Valid type attribute values:
      booleanstringdateintposint - integer &gt;= 0doubleemailElement IDs
      The names of the HTTP parameters are generated by random. If this is not desired,
      you can use the id attribute.


&lt;xform style="twocolumn"&gt;
  &lt;textField id="field1" .../&gt;
  &lt;checkBox id="$id.field2" .../&gt;
&lt;/xform&gt;


      creates two HTML input fields, the first with
      name="field1", the second with name="myform.field2", where myform
      is the id attribute of this form tag.

      Form Elements
      The elements are rendered via /WEB-INF/wcf/controls.xsl. Please
      look there for details.
      labeltextFieldtextAreapasswordcheckBoxradioButtonlistBox1listBoxNimgButtonbutton
      Use disabled="true" to make elements read-only.
      
      Use required="true" if user input is required.

      Form Buttons
       Buttons must have either a "handler" or an "actionReference"
       attribute. "handler" specifies a class that implements the
       NodeHandler interface which may handle requests, change button
       label etc. Use of "actionReference" is much easier and recommended,
       "actionReference" is the name of a method in the bean, that
       takes a single argument of type RequestContext. This method
       is invoked when the user presses the button.
       action="revert" -
            calls revert() on the Form, i.e. reads
            the bean properties and formats
            the data for presentation.
         action="validate" -
             calls validate() on the Form, i.e. parses
             user input and writes the values to the bean properties
         forward="/some/page.jsp" -
             if validation succeeds forwards to another page. Paramers make sense here.
         hide="true" -
             if validation succeeds hides the component
         successAttr="name-of-request-attribute" -
             if validation succeeds a request attribute with value true
             is created.
         handler="fully.qualified.ClassName" -
             name of a class that implements NodeHandler and is
             responsible for this nodeactionReference="methodName" the name of a method
             that takes an RequestContext as its argument.
         Bookmark support
      see com.tonbeller.wcf.bookmark. The content of the editable bean properties can be
      collected and restored via the Bookmarkable interface. To enable this, the tag
      attribute "bookmarkable" must be set to true.

      Examples
      See working examples in /WEB-INF

    </description>
<attribute>
<name>id</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>
<description>Name of the Session Attribute that is created by this tag</description>
</attribute>
<attribute>
<name>xmlUri</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>
<description>
    Path of an XML config file that describes the HTML form, relative to the application context.
    There may be different form descriptions for different Locales, the
    stylesheet will be choosen upon similar rules to ResourceBundle.
    
    Example: xmlUri='/WEB-INF/myform.xml'. For a german
    Browser WCF will try to load /WEB-INF/myform_de.xml.
    If this fails, it will load /WEB-INF/myform.xml.
  </description>
</attribute>
<attribute>
<name>visible</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
<description>Sets the visible property of the component. The WCF Render tag will not show a component whose visible flag is false</description>
</attribute>
<attribute>
<name>validate</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
<description>if set to true, then user input will be automatically
  verified, even if the button of another component was pressed.
  Both components must be part of the same HTML form element to make this work.</description>
</attribute>
<attribute>
<name>role</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
<description>
    Name of a role, optionally prefixed by '!'.
    Example: role='tomcat' allows members of the role tomcat to access
    this component, role='!tomcat' grants access to everybody except tomcat members.
  </description>
</attribute>
<attribute>
<name>bundle</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
<description>ResourceBundle for i18n replacements. If a text- or attributenode in xml starts with 'fmt:' the remaining text will be interpreted as key into the resource bundle.</description>
</attribute>
<attribute>
<name>model</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>
<description>EL expression that resolves to the bean that shall be edited</description>
</attribute>
<attribute>
<name>bookmarkable</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
<description>true|false indicating whether this form shall save its beans state. Default is false</description>
</attribute>
<attribute>
<name>finishButton</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
<description>true|false indicating whether this form supports finish if it is not the last page of a wizard. Default is true</description>
</attribute>
</tag>

</taglib>